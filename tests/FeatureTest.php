<?php


namespace Roboticsexpert\FeatureFlag\Tests;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Roboticsexpert\FeatureFlag\Services\FeatureFlagService;
use Tests\TestCase;

class FeatureTest extends TestCase
{
    private FeatureFlagService $featureFlagService;

    use DatabaseTransactions;

    protected function setUp(): void
    {
        $this->featureFlagService = new FeatureFlagService();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateNewFeatureFlag()
    {
        $featureFlag = $this->featureFlagService->createFeatureFlag('test-feature-flag');

        $this->assertEquals($featureFlag->name, 'test-feature-flag');

        $featureFlags = $this->featureFlagService->getAllFeatureFlags();

        $this->assertEquals(1, $featureFlags->count());
    }

    public function testDeleteFeatureFlag()
    {
        $featureFlag = $this->featureFlagService->createFeatureFlag('test-feature-flag');

        $featureFlags = $this->featureFlagService->getAllFeatureFlags();

        $this->assertEquals(1, $featureFlags->count());

        $this->assertTrue($this->featureFlagService->destroyFeatureFlag($featureFlag->name));

        $featureFlags = $this->featureFlagService->getAllFeatureFlags();

        $this->assertEquals(0, $featureFlags->count());

        $this->assertFalse($this->featureFlagService->destroyFeatureFlag($featureFlag->name));

    }


    public function testGetTypes()
    {

        $this->assertEquals(
            [
                'DISABLED',
                'PRIVATE',
                'PUBLIC',
            ],
            $this->featureFlagService->getTypes());
    }


    public function testChangeFeatureFlagType()
    {
        $featureFlag = $this->featureFlagService->createFeatureFlag('test-feature-flag');
        $this->assertEquals('DISABLED', $featureFlag->type);
        $featureFlag = $this->featureFlagService->changeFeatureFlagType('test-feature-flag', 'PUBLIC');
        $this->assertEquals('PUBLIC', $featureFlag->type);

        $this->expectException(\Exception::class);
        $featureFlag = $this->featureFlagService->changeFeatureFlagType('test-feature-flag', 'TEST_STRING');

    }

    public function testChangeFeatureFlagTypeNotFound()
    {
        $featureFlag = $this->featureFlagService->createFeatureFlag('test-feature-flag');
        $this->expectException(\Exception::class);
        $featureFlag = $this->featureFlagService->changeFeatureFlagType('test-feature-flag1', 'PUBLIC');

    }

    public function testAttachUserToFeatureFlag()
    {
        $featureFlag = $this->featureFlagService->createFeatureFlag('test-feature-flag');

        $this->assertTrue($this->featureFlagService->attachUserToFeatureFlag(1, 'test-feature-flag'));


        $this->assertTrue($this->featureFlagService->attachUserToFeatureFlag(2, 'test-feature-flag'));


        $this->assertFalse($this->featureFlagService->attachUserToFeatureFlag(2, 'test-feature-flag-1'));


        $this->assertEquals(
            2,
            $this->featureFlagService->getAllFeatureFlagUsers('test-feature-flag')->count()
        );


        $this->assertTrue($this->featureFlagService->detachUserToFeatureFlag(1, 'test-feature-flag'));

        $this->assertEquals(
            1,
            $this->featureFlagService->getAllFeatureFlagUsers('test-feature-flag')->count()
        );

        $this->assertTrue($this->featureFlagService->detachUserToFeatureFlag(2, 'test-feature-flag'));
        $this->assertEquals(
            0,
            $this->featureFlagService->getAllFeatureFlagUsers('test-feature-flag')->count()
        );


        $this->assertFalse($this->featureFlagService->detachUserToFeatureFlag(2, 'test-feature-flag'));

    }


    public function testDisabledFeatureFlagsForPublic()
    {

        $f1 = $this->featureFlagService->createFeatureFlag('F1');
        $f2 = $this->featureFlagService->createFeatureFlag('F2');
        $f3 = $this->featureFlagService->createFeatureFlag('F3');
        $f4 = $this->featureFlagService->createFeatureFlag('F4');

        $this->featureFlagService->changeFeatureFlagType('F1', 'PUBLIC');
        $this->featureFlagService->changeFeatureFlagType('F2', 'PRIVATE');
        $this->featureFlagService->changeFeatureFlagType('F3', 'PRIVATE');
        $this->featureFlagService->changeFeatureFlagType('F4', 'DISABLED');

        //test public access to features
        $expected = [
            'F4',
            'F3',
            'F2'
        ];
        $result = $this->featureFlagService->getDisabledFeatureFlagsName();
        $this->assertEquals(
            sort($expected),
            sort($result)
        );

        //test access to disabled features should not work !
        $this->featureFlagService->attachUserToFeatureFlag(1, 'F4');
        $expected = [
            'F4',
            'F3',
            'F2'
        ];
        $result = $this->featureFlagService->getDisabledFeatureFlagsName();
        $this->assertEquals(
            sort($expected),
            sort($result)
        );

        //test access to public feature
        $this->featureFlagService->attachUserToFeatureFlag(1, 'F1');
        $expected = [
            'F4',
            'F3',
            'F2'
        ];
        $result = $this->featureFlagService->getDisabledFeatureFlagsName();
        $this->assertEquals(
            sort($expected),
            sort($result)
        );

        //test access to public feature
        $this->featureFlagService->attachUserToFeatureFlag(1, 'F2');
        $expected = [
            'F4',
            'F3',
        ];
        $result = $this->featureFlagService->getDisabledFeatureFlagsName(1);
        $this->assertEquals(
            sort($expected),
            sort($result)
        );
        $expected = [
            'F4',
            'F3',
            'F2',
        ];
        $result = $this->featureFlagService->getDisabledFeatureFlagsName(2);
        $this->assertEquals(
            sort($expected),
            sort($result)
        );


        $this->assertFalse($this->featureFlagService->isFeatureFlagEnabledForUser('F4', 2));


    }
}
